spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:openspot}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: validate
      default_schema: auth_service
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        default_schema: auth_service
    show-sql: false
    
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope: 
              - profile
              - email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://www.googleapis.com/oauth2/v3/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
            
jwt:
  secret: ${JWT_SECRET:openspot-jwt-secret-key-for-development-only}
  expiration: 86400000 # 24 hours

server:
  port: 8081

management:
  endpoints:
    web:
      exposure:
        include: health, info

resilience4j:
  circuitbreaker:
    instances:
      google-oauth:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10