수집할 공공데이터 - https://data.seoul.go.kr/dataList/datasetList.do#
서울시 일반음식점 인허가 정보 api - https://data.seoul.go.kr/dataList/OA-16094/S/1/datasetView.do
서울시 상권분석서비스(길단위인구-상권)(csv)(분기단위) - https://data.seoul.go.kr/dataList/OA-15568/S/1/datasetView.do
서울시 상권분석서비스(추정매출-상권)(년단위) - https://data.seoul.go.kr/dataList/OA-15572/S/1/datasetView.do
서울시 상권분석서비스(영역-상권)(비정기)(코드-위치 매칭용) - https://data.seoul.go.kr/dataList/OA-15560/S/1/datasetView.do
서울시 상권분석서비스(영역-상권배후지)(코드-위치 매칭용) - https://data.seoul.go.kr/dataList/OA-22159/S/1/datasetView.do
서울시 상권분석서비스(추정매출-상권배후지)(월간) - https://data.seoul.go.kr/dataList/OA-15573/S/1/datasetView.do
서울시 상권분석서비스(추정매출-서울시)(분기) - https://data.seoul.go.kr/dataList/OA-22177/S/1/datasetView.do



1. 최종 아키텍처 및 레파지토리 구조
제안하신 서비스 구성에 MSA의 필수 요소인 Config Server와 API Gateway를 포함하면 최종 아키텍처는 다음과 같습니다.

**map-query**와 report 서비스는 동일한 상권 데이터(가게 위치, 통계 등)를 사용하므로, MVP 단계에서는 **analysis-service**라는 이름의 단일 서비스로 통합하여 관리 효율성을 높이는 것을 추천합니다.

/ (GitHub Organization)
|
├── 📂 open-spot-backend/  (Kotlin/Spring 기반 서비스들을 위한 Mono-repo)
│   ├── build.gradle.kts
│   └── msa-modules/
│       ├── 0-config-service/
│       ├── 1-gateway-service/
│       ├── 2-auth-service/
│       ├── 3-analysis-service/  (Report + Map Query 기능 통합)
│       └── 4-notification-service/
│
└── 📂 open-spot-data-pipeline/ (Python ETL 스크립트용 Multi-repo)
    ├── scripts/
    └── pyproject.toml
통신 흐름:
Client -> Gateway -> Auth/Analysis Service -> DB/Redis
Analysis Service -> Kafka -> Notification Service

2. 각 서비스별 기술 설계 및 핵심 라이브러리
A. Config Service
주요 역할: 모든 마이크로서비스의 설정 정보(DB 정보, API 키 등)를 중앙에서 관리하고 제공합니다.

핵심 라이브러리: spring-cloud-config-server

B. API Gateway (gateway-service)
주요 역할: 시스템의 단일 진입점. 요청 라우팅, 공통 인증/인가, 로깅을 담당합니다.

핵심 라이브러리: Spring Cloud Gateway, Spring Boot Actuator

주요 API: API 엔드포인트 없이, 다른 서비스로 요청을 전달하는 라우팅 규칙만 정의합니다.

C. 인증 서비스 (auth-service)
주요 역할: Google 소셜 로그인 처리, 사용자 정보 관리(CRUD), 내부용 JWT(인증 토큰) 발급 및 검증.

핵심 라이브러리: Spring Boot, Spring Security (OAuth2 Client), Spring Data JPA, Flyway, jjwt (JWT 라이브러리), PostgreSQL Driver, MockK, Testcontainers

주요 API 엔드포인트:

GET /login/oauth2/code/google: Google 로그인 콜백 처리 (Spring Security가 상당 부분 자동 처리)

GET /api/users/me: 로그인된 사용자 정보 조회

POST /api/auth/token/refresh: JWT 토큰 갱신

D. 분석 서비스 (analysis-service)
주요 역할: 상권 데이터 조회 및 분석 리포트 생성의 핵심 비즈니스 로직 수행.

핵심 라이브러리: Spring Boot, Spring Data JPA + hibernate-spatial, PostgreSQL Driver + PostGIS JDBC, Spring for Apache Kafka (이벤트 발행용), Spring Data Redis, MockK, Testcontainers

주요 API 엔드포인트:

GET /api/stores?lat=...&lon=...&radius=...: 지도에 표시할 특정 지역의 가게 목록 조회 (Redis 캐싱 적용 대상)

POST /api/reports: 특정 조건으로 상권 분석 리포트 생성을 요청 (생성 완료 시 Kafka로 이벤트 발행)

GET /api/reports/{reportId}: 생성된 리포트 결과 조회

E. 알림 서비스 (notification-service)
주요 역할: 다른 서비스로부터 Kafka를 통해 이벤트를 받아, 사용자에게 알림(푸시, 문자 등)을 보냅니다. (MVP에서는 로그 출력으로 대체)

핵심 라이브러리: Spring Boot, Spring for Apache Kafka

주요 API 엔드포인트: 외부 호출 API 없음 (Kafka Consumer 역할만 수행).

3. MVP 1단계 개발 로드맵
Step 1: 인프라 & 데이터 준비

open-spot-backend와 open-spot-data-pipeline 두 개의 Git 레파지토리를 생성합니다.

별도의 Git 레파토리(config-repo)에 각 서비스의 yml 설정 파일들을 생성합니다.

Docker Compose를 이용해 PostgreSQL (PostGIS 포함), Redis, Kafka를 로컬에 실행합니다.

Python ETL 스크립트를 실행하여 stores 테이블에 데이터를 채웁니다.

Step 2: 핵심 서비스 개발 (Config & Analysis)

config-service를 가장 먼저 개발하여 실행합니다.

analysis-service를 개발합니다. bootstrap.yml로 Config 서버에 연결하고, PostGIS 공간 쿼리를 이용한 가게 조회 API(/api/stores)를 먼저 구현합니다.

Step 3: 인증 및 게이트웨이 연동

auth-service를 개발하여 Google 로그인 및 JWT 발급 기능을 구현합니다.

gateway-service를 개발하고, Config 서버로부터 라우팅 설정을 받아와 auth-service와 analysis-service로 요청을 전달하는지 테스트합니다.

Step 4: 리포트 및 비동기 연동

analysis-service에 리포트 생성(/api/reports) 로직을 구현합니다. 리포트 생성이 완료되면 Kafka로 report-generated 이벤트를 발행(Produce)합니다.

notification-service를 개발하여 해당 이벤트를 구독(Consume)하고, 콘솔에 "리포트 생성 완료! 사용자 ID: XXX" 와 같은 로그를 출력하는 기능을 구현합니다.

Step 5: 프론트엔드 연동 및 E2E 테스트

기본적인 프론트엔드(React/Vue)를 개발하여, 로그인 버튼 클릭 -> Google 로그인 -> 토큰 수신 -> 토큰을 헤더에 담아 가게 목록 조회 API 호출 -> 지도에 마커 표시까지 이어지는 전체 흐름을 테스트합니다.