# ==============================================================================
# Global Configuration
# ==============================================================================
global:
  namespace: openspot
  imageRegistry: ""  # 로컬 이미지 사용 (openspot/service:latest)
  imagePullPolicy: IfNotPresent
  storageClass: standard

# ==============================================================================
# Infrastructure Services
# ==============================================================================

# PostgreSQL + PostGIS
postgresql:
  enabled: true
  image: postgis/postgis:15-3.3
  replicas: 1

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  persistence:
    enabled: true
    size: 10Gi
    storageClass: standard

  service:
    port: 5432
    type: ClusterIP

  env:
    POSTGRES_DB: openspot
    POSTGRES_USER: postgres
    # POSTGRES_PASSWORD는 Secret에서 주입

  # Minikube 환경 최적화: 헬스체크 타임아웃 증가
  healthCheck:
    liveness:
      initialDelaySeconds: 90    # kind: 60 -> minikube: 90
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 5
    readiness:
      initialDelaySeconds: 60    # kind: 45 -> minikube: 60
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 6

# Redis
redis:
  enabled: true
  image: redis:7.2-alpine
  replicas: 1

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

  persistence:
    enabled: true
    size: 5Gi
    storageClass: standard

  service:
    port: 6379
    type: ClusterIP

# Zookeeper
zookeeper:
  enabled: true
  image: confluentinc/cp-zookeeper:7.4.0
  replicas: 1

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

  persistence:
    enabled: true
    size: 5Gi
    storageClass: standard

  service:
    port: 2181
    type: ClusterIP

  env:
    ZOOKEEPER_CLIENT_PORT: "2181"
    ZOOKEEPER_TICK_TIME: "2000"

# Kafka
kafka:
  enabled: true
  image: confluentinc/cp-kafka:7.4.0
  replicas: 1

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  persistence:
    enabled: true
    size: 10Gi
    storageClass: standard

  service:
    port: 9092
    type: ClusterIP

  env:
    KAFKA_BROKER_ID: "1"
    KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
    KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
    KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

# ==============================================================================
# Microservices
# ==============================================================================

# Config Service
configService:
  enabled: true
  name: config-service
  replicas: 1
  image:
    repository: openspot/config-service
    tag: latest

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

  service:
    port: 9999
    targetPort: 9999
    type: ClusterIP

  env:
    SPRING_PROFILES_ACTIVE: "native"

# Gateway Service
gatewayService:
  enabled: true
  name: gateway-service
  replicas: 1
  image:
    repository: openspot/gateway-service
    tag: latest

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  service:
    port: 8080
    targetPort: 8080
    type: LoadBalancer

  env:
    SPRING_CLOUD_CONFIG_URI: "http://config-service:9999"

# Auth Service
authService:
  enabled: true
  name: auth-service
  replicas: 1
  image:
    repository: openspot/auth-service
    tag: latest

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  service:
    port: 8081
    targetPort: 8081
    type: ClusterIP

  env:
    SPRING_CLOUD_CONFIG_URI: "http://config-service:9999"
    POSTGRES_HOST: "postgresql"
    REDIS_HOST: "redis"

# Location Service
locationService:
  enabled: true
  name: location-service
  replicas: 1
  image:
    repository: openspot/location-service
    tag: latest

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  service:
    port: 8082
    targetPort: 8082
    type: ClusterIP

  env:
    SPRING_CLOUD_CONFIG_URI: "http://config-service:9999"
    POSTGRES_HOST: "postgresql"
    REDIS_HOST: "redis"
    KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

# Notification Service
notificationService:
  enabled: true
  name: notification-service
  replicas: 1
  image:
    repository: openspot/notification-service
    tag: latest

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  service:
    port: 8083
    targetPort: 8083
    type: ClusterIP

  env:
    SPRING_CLOUD_CONFIG_URI: "http://config-service:9999"
    POSTGRES_HOST: "postgresql"
    KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

# ==============================================================================
# Ingress Configuration
# ==============================================================================
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"

  hosts:
    - host: openspot.local
      paths:
        - path: /
          pathType: Prefix
          service: gateway-service
          port: 8080
    - host: api.openspot.kang-labs.com
      paths:
        - path: /
          pathType: Prefix
          service: gateway-service
          port: 8080

  # TLS 설정 (optional)
  # tls:
  #   - secretName: openspot-tls
  #     hosts:
  #       - openspot.local

# ==============================================================================
# Secrets & ConfigMaps
# ==============================================================================
secrets:
  # Database credentials
  postgres:
    password: "postgres"  # 프로덕션에서는 반드시 변경!

  # JWT Secret
  jwt:
    secret: "open-spot-jwt-secret-key-for-local-development-change-in-production"

  # Google OAuth2
  google:
    clientId: "your-google-client-id"
    clientSecret: "your-google-client-secret"

# ==============================================================================
# Monitoring & Observability (optional)
# ==============================================================================
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false
