{{- if .Values.postgresql.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: {{ .Values.global.namespace }}
  labels:
    app: postgresql
    {{- include "openspot.labels" . | nindent 4 }}
spec:
  ports:
    - port: {{ .Values.postgresql.service.port }}
      targetPort: 5432
      protocol: TCP
      name: postgres
  clusterIP: None  # Headless service for StatefulSet
  selector:
    app: postgresql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: {{ .Values.global.namespace }}
  labels:
    app: postgresql
    {{- include "openspot.labels" . | nindent 4 }}
spec:
  serviceName: postgresql
  replicas: {{ .Values.postgresql.replicas }}
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - name: postgresql
          image: {{ .Values.postgresql.image }}
          imagePullPolicy: {{ include "openspot.imagePullPolicy" . }}
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: openspot-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: openspot-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: openspot-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U postgres
            initialDelaySeconds: {{ .Values.postgresql.healthCheck.liveness.initialDelaySeconds | default 90 }}
            periodSeconds: {{ .Values.postgresql.healthCheck.liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.postgresql.healthCheck.liveness.timeoutSeconds | default 10 }}
            failureThreshold: {{ .Values.postgresql.healthCheck.liveness.failureThreshold | default 5 }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U postgres
            initialDelaySeconds: {{ .Values.postgresql.healthCheck.readiness.initialDelaySeconds | default 60 }}
            periodSeconds: {{ .Values.postgresql.healthCheck.readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.postgresql.healthCheck.readiness.timeoutSeconds | default 10 }}
            failureThreshold: {{ .Values.postgresql.healthCheck.readiness.failureThreshold | default 6 }}
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.postgresql.persistence.storageClass }}
        storageClassName: {{ .Values.postgresql.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.postgresql.persistence.size }}
{{- end }}
